#if UNITY_EDITOR
using System;
using System.IO;
using System.Linq;
using System.Text;
using Racer.EzSoundCore.Core;
using UnityEditor;
using UnityEngine;

namespace Racer.EzSoundCore.Editor
{
    [CustomEditor(typeof(SoundCore))]
    public class ClipIdGenerator : UnityEditor.Editor
    {
        private bool _isAsmrefFileImported;
        private const string RootPath = "Assets/EzSoundCore/Elements/";

        private const string FileName = "SoundCoreExtensions";
        private const string FilePath = RootPath + FileName + ".cs";

        private const string AsmrefName = "Racer.EzSoundCore.Elements.asmref";
        private const string AsmrefPath = RootPath + AsmrefName;

        private SerializedProperty _audioClipsPath;
        private SoundCore _soundCore;


        private void OnEnable()
        {
            _audioClipsPath = serializedObject.FindProperty("audioClipsPath");
            _isAsmrefFileImported = File.Exists(AsmrefPath);
        }

        public override void OnInspectorGUI()
        {
            DrawDefaultInspector();
            serializedObject.Update();

            _soundCore = (SoundCore)target;

            EditorGUILayout.Space(10);
            EditorGUILayout.BeginVertical(EditorStyles.helpBox);

            EditorGUILayout.PropertyField(_audioClipsPath, Styles.AudioClipsPathField);

            EditorGUILayout.BeginHorizontal();

            if (GUILayout.Button(Styles.FindAudioClipsBtn))
                FindAudioClipsFromPath(_audioClipsPath.stringValue);

            if (GUILayout.Button(Styles.ClearAudioClipsBtn))
                _soundCore.AllAudioClips.Clear();

            EditorGUILayout.EndHorizontal();

            if (_isAsmrefFileImported)
            {
                EditorGUILayout.Space(5);

                if (GUILayout.Button(Styles.GenerateEnumBtn))
                    GenerateID();


                EditorGUILayout.HelpBox(
                    ">'Audio-clips Path' should be defined like so: {path1}/{path2}.." +
                    "\n>Leaving it empty will search for all audio clips in the project." +
                    "\n>Regenerate anytime you add/remove audio clips.",
                    MessageType.Info);
            }
            else
            {
                EditorGUILayout.HelpBox(
                    $"To be able to generate an ID for each audio clip, import the file: '{AsmrefName}'" +
                    "\nUse the context menu: 'Racer > EzSoundCore > Import Elements' to import it" +
                    "\nAdd it to your project's asmdef(assuming it uses one) references thereafter(under assembly definition references)",
                    MessageType.Warning);
            }

            EditorGUILayout.EndVertical();

            serializedObject.ApplyModifiedProperties();
        }


        /// <summary>
        /// Generates a C# file containing an enum for all audio clips.
        /// </summary>
        private void GenerateID()
        {
            try
            {
                if (!_soundCore) return;

                var audioClips = _soundCore.AllAudioClips;

                if (audioClips == null || audioClips.Count == 0)
                {
                    Debug.LogWarning("No audio clips found.");
                    return;
                }

                var uniqueClips = audioClips
                    .Where(c => c)
                    .Distinct()
                    .ToList();

                var sb = new StringBuilder();
                sb.AppendLine($"// Auto-generated by {nameof(ClipIdGenerator)}.cs");
                sb.AppendLine("using Racer.EzSoundCore.Core;");
                sb.AppendLine();
                sb.AppendLine("namespace Racer.EzSoundCore.Elements");
                sb.AppendLine("{");

                // Generate enum
                sb.AppendLine("    public enum ClipID");
                sb.AppendLine("    {");

                for (var i = 0; i < uniqueClips.Count; i++)
                {
                    var sanitized = SanitizeString(uniqueClips[i].name);
                    sb.AppendLine($"        {sanitized} = {i},");
                }

                sb.AppendLine("    }");
                sb.AppendLine();

                // Generate extensions
                sb.AppendLine($"    public static class {FileName}");
                sb.AppendLine("    {");
                sb.AppendLine(
                    "        public static void PlaySfx(this SoundCore soundCore, ClipID clipId, float volumeScale = 1f, int audioSrcIndex = 0)");
                sb.AppendLine("        {");
                sb.AppendLine("            soundCore.PlaySfx((int)clipId, volumeScale, audioSrcIndex);");
                sb.AppendLine("        }");
                sb.AppendLine();
                sb.AppendLine(
                    "        public static void PlayMusic(this SoundCore soundCore, ClipID clipId, int audioSrcIndex = 0)");
                sb.AppendLine("        {");
                sb.AppendLine("            soundCore.PlayMusic((int)clipId, audioSrcIndex);");
                sb.AppendLine("        }");
                sb.AppendLine("    }");

                sb.AppendLine("}");

                if (!File.Exists(AsmrefPath))
                {
                    throw new FileNotFoundException(fileName: AsmrefPath,
                        message: $"Could not find the file '{AsmrefName}' at: {AsmrefPath}" +
                                 "\nUse the context menu: 'Racer > EzSoundCore > Import Elements' to import it, " +
                                 "then add it to your project's asmdef(assuming it uses one) references thereafter(under assembly definition references)");
                }

                Directory.CreateDirectory(Path.GetDirectoryName(FilePath)!);
                File.WriteAllText(FilePath, sb.ToString());

                Debug.Log($"{FileName}.cs (with ClipID enum) generated at: " + FilePath,
                    AssetDatabase.LoadAssetAtPath<MonoScript>(FilePath));

                AssetDatabase.Refresh();
            }
            catch (Exception e)
            {
                Debug.LogError($"Generation failed!\n{e.Message}");
            }
        }

        /// <summary>
        /// Finds all audio clips within a given relative path.
        /// </summary>
        private void FindAudioClipsFromPath(string path)
        {
            var searchRoot = string.IsNullOrWhiteSpace(path) ? "Assets" : $"Assets/{path}";

            var audioClips = AssetDatabase.FindAssets("t:AudioClip", new[] { searchRoot })
                .Select(AssetDatabase.GUIDToAssetPath)
                .Select(AssetDatabase.LoadAssetAtPath<AudioClip>)
                .Where(c => c)
                .ToList();

            _soundCore.AllAudioClips = audioClips;
            EditorUtility.SetDirty(_soundCore);
        }

        /// <summary>
        /// Sanitizes string to ensure it's a valid C# enum identifier.
        /// </summary>
        private static string SanitizeString(string rawName)
        {
            // Replace dashes and spaces with underscores
            rawName = rawName.Replace("-", "_").Replace(" ", "_");

            // Remove invalid characters
            var clean = new string(rawName
                .Where(c => char.IsLetterOrDigit(c) || c == '_')
                .ToArray());

            // Prefix with underscore if starts with digit
            if (!string.IsNullOrEmpty(clean) && char.IsDigit(clean[0]))
                clean = "_" + clean;

            return clean;
        }
    }

    internal static class Styles
    {
        public static readonly GUIContent AudioClipsPathField =
            new("Audio-clips Path",
                "The path to search for audio clips, omit the 'Assets/' folder. E.g., Audio, 'Audio/Sounds'");

        public static readonly GUIContent FindAudioClipsBtn =
            new("Find Audio Clips from Path",
                "Searches for audio clips in the specified path and adds them to the audio clips array.");

        public static readonly GUIContent ClearAudioClipsBtn =
            new("Clear Audio Clips",
                "Clears the audio clips array.");

        public static readonly GUIContent GenerateEnumBtn =
            new("Generate ID from Audio Clips",
                "Generates a class that makes it easier to play audio clips by ID.");
    }
}
#endif