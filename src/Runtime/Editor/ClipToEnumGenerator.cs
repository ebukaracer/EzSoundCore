#if UNITY_EDITOR
using System;
using System.IO;
using System.Linq;
using System.Text;
using Racer.EzSoundCore.Core;
using Racer.EzSoundCore.Utilities;
using UnityEditor;
using UnityEngine;

namespace Racer.EzSoundCore.Editor
{
    [CustomEditor(typeof(SoundCore))]
    public class ClipToEnumGenerator : UnityEditor.Editor
    {
        private const string FileName = "ClipID";

        private SerializedProperty _audioClipsPath;
        private SoundCore _soundCore;


        private void OnEnable()
        {
            _audioClipsPath = serializedObject.FindProperty("audioClipsPath");
        }

        public override void OnInspectorGUI()
        {
            DrawDefaultInspector();
            serializedObject.Update();

            _soundCore = (SoundCore)target;

            EditorGUILayout.Space(10);
            EditorGUILayout.BeginVertical(EditorStyles.helpBox);

            EditorGUILayout.PropertyField(_audioClipsPath, Styles.AudioClipsPathField);

            EditorGUILayout.BeginHorizontal();

            if (GUILayout.Button(Styles.FindAudioClipsBtn))
                FindAudioClipsFromPath(_audioClipsPath.stringValue);

            if (GUILayout.Button(Styles.ClearAudioClipsBtn))
                _soundCore.AllAudioClips.Clear();

            EditorGUILayout.EndHorizontal();

            EditorGUILayout.Space(5);

            if (GUILayout.Button(Styles.GenerateEnumBtn))
                GenerateEnumFromClip();

            if (GUILayout.Button(Styles.MapClipsIdBtn))
                MapClipsId();

            EditorGUILayout.EndVertical();

            EditorGUILayout.HelpBox(
                ">'Audio-clips Path' should defined like so: {path1}/{path2}.." +
                "\n>Leaving it empty will search for all audio-clips in the project." +
                "\n>Generate ID first, then Map.",
                MessageType.Info);

            serializedObject.ApplyModifiedProperties();
        }

        private void GenerateEnumFromClip()
        {
            try
            {
                if (!_soundCore)
                    return;

                var audioClips = _soundCore.AllAudioClips;

                if (audioClips == null || audioClips.Count == 0)
                {
                    Debug.LogWarning("No audio-clips found to generate enumId.");
                    return;
                }

                var uniqueClips = audioClips.Distinct().ToList();

                var sb = new StringBuilder();
                sb.AppendLine($"// Auto-generated by {nameof(ClipToEnumGenerator)}");
                sb.AppendLine();
                sb.AppendLine("namespace Racer.EzSoundCore");
                sb.AppendLine("{");
                sb.AppendLine($"    public enum {FileName}");
                sb.AppendLine("    {");

                foreach (var enumName in uniqueClips.Select(clip => SanitizeString(clip.name)))
                    sb.AppendLine($"        {enumName},");

                sb.AppendLine("    }");
                sb.AppendLine("}");

                var assetPath = $"Assets/EzSoundCore/{FileName}.cs";

                Directory.CreateDirectory(Path.GetDirectoryName(assetPath) ??
                                          throw new InvalidOperationException(
                                              $"Directory path is invalid: {assetPath}"));

                File.WriteAllText(assetPath, sb.ToString());
                AssetDatabase.Refresh();

                Debug.Log("Generation successful at: " + assetPath,
                    AssetDatabase.LoadAssetAtPath<MonoScript>(assetPath));
            }
            catch (Exception e)
            {
                Debug.LogError($"Generation failed!\n{e.Message}");
            }
        }

        private void MapClipsId()
        {
            try
            {
                _soundCore.MappedClipsData.Clear();

                var uniqueClips = _soundCore.AllAudioClips.Distinct();

                foreach (var audioClip in uniqueClips)
                {
                    _soundCore.MappedClipsData.Add(new SoundClipData(SanitizeString(audioClip.name),
                        audioClip));
                }

                EditorUtility.SetDirty(_soundCore);
                Debug.Log("Mapping successful!");
            }
            catch (Exception e)
            {
                Debug.LogError($"Mapping failed!\n{e.Message}");
            }
        }

        private void FindAudioClipsFromPath(string path)
        {
            var audioClips = AssetDatabase.FindAssets("t:AudioClip", new[] { $"Assets/{path}" })
                .Select(AssetDatabase.GUIDToAssetPath)
                .Select(AssetDatabase.LoadAssetAtPath<AudioClip>)
                .Where(clip => clip)
                .ToList();

            _soundCore.AllAudioClips = audioClips;
            EditorUtility.SetDirty(_soundCore);
        }

        private static string SanitizeString(string rawName)
        {
            // Replace dashes and spaces with underscores
            rawName = rawName.Replace("-", "_").Replace(" ", "_");

            // Remove any characters that are not letters, digits, or underscores
            var clean = new string(rawName
                .Where(c => char.IsLetterOrDigit(c) || c == '_')
                .ToArray());

            // Ensure it doesn't start with a digit
            if (!string.IsNullOrEmpty(clean) && char.IsDigit(clean[0]))
                clean = "_" + clean;

            return clean;
        }
    }

    internal static class Styles
    {
        public static readonly GUIContent AudioClipsPathField =
            new("Audio-clips Path",
                "The path to search for audio-clips, omit the 'Assets/' folder. E.g., Audio, 'Audio/Sounds'");

        public static readonly GUIContent FindAudioClipsBtn =
            new("Find Audio Clips from Path",
                "Searches for audio-clips in the specified path and adds them to the audio-clips array.");

        public static readonly GUIContent ClearAudioClipsBtn =
            new("Clear Audio Clips",
                "Clears the audio-clips array.");

        public static readonly GUIContent GenerateEnumBtn =
            new("Generate ID from Audio Clips (1)",
                "Generates a file containing the EnumIDs of all the audio-clips.");

        public static readonly GUIContent MapClipsIdBtn =
            new("Map ID to Audio Clips (2)",
                "Assigns each audio-clip their generated EnumID represented as a string.\nThis is useful for quick access to audio-clips by their EnumID.");
    }
}
#endif